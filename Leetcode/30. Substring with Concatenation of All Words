```
class Solution {
public:
    vector<int> findSubstring(string s, vector<string>& words) {
        if (s.empty()||words.empty()) return {};
        vector<int> res;
        int n = words.size();
        int len = words[0].size();
        unordered_map<string, int> wordCnt;
        for (int i = 0; i < n; i++)
            wordCnt[words[i]]++;
        for (int i = 0; i <= int(s.length())-n*len; i++){
            unordered_map<string, int> strCnt;
            int j;
            for (j = 0; j < n; j++){
                string t = s.substr(i+j*len, len);
                if (!wordCnt.count(t)) break;
                strCnt[t]++;
                if (strCnt[t] > wordCnt[t]) break;
            }
            if (j == n)
                res.push_back(i);
        }
        return res;
    }
};
```
